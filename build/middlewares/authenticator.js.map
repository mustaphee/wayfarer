{"version":3,"sources":["../../src/middlewares/authenticator.js"],"names":["SECRET_KEY","process","env","isAdminAuthenticated","req","res","next","token","query","headers","jwt","verify","err","decoded","status","json","error","isAdmin","send","message","isUserAuthenticated"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;;;AAJA;;AACA;IAKQA,U,GAAeC,OAAO,CAACC,G,CAAvBF,U;;AAED,IAAMG,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACtD,MAAMC,KAAK,GAAGH,GAAG,CAACI,KAAJ,CAAUD,KAAV,IAAmBH,GAAG,CAACK,OAAJ,CAAYF,KAA7C;;AACA,MAAIA,KAAJ,EAAW;AACTG,6BAAIC,MAAJ,CAAWJ,KAAX,EAAkBP,UAAlB,EAA8B,UAACY,GAAD,EAAMC,OAAN,EAAkB;AAC9C,UAAID,GAAJ,EAAS;AACP,eAAOP,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,UAAAA,MAAM,EAAE,OAAV;AAAmBE,UAAAA,KAAK,EAAE;AAA1B,SAArB,CAAP;AACD,OAFD,MAEO,IAAIH,OAAO,CAACI,OAAR,KAAoB,IAAxB,EAA8B;AACnC,eAAOZ,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAAEJ,UAAAA,MAAM,EAAE,OAAV;AAAmBK,UAAAA,OAAO,EAAE;AAA5B,SAArB,CAAP;AACD,OAFM,MAEA,IAAIN,OAAO,CAACI,OAAR,KAAoB,IAAxB,EAA8B;AACnC;AACAb,QAAAA,GAAG,CAACS,OAAJ,GAAcA,OAAd;AACAP,QAAAA,IAAI;AACL;AACF,KAVD;AAWD,GAZD,MAYO;AACL,WAAOD,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAAEJ,MAAAA,MAAM,EAAE,OAAV;AAAmBE,MAAAA,KAAK,EAAE;AAA1B,KAArB,CAAP;AACD;AACF,CAjBM;;;;AAmBA,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAChB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrD,MAAMC,KAAK,GAAGH,GAAG,CAACI,KAAJ,CAAUD,KAAV,IAAmBH,GAAG,CAACK,OAAJ,CAAYF,KAA7C;;AACA,MAAIA,KAAJ,EAAW;AACTG,6BAAIC,MAAJ,CAAWJ,KAAX,EAAkBP,UAAlB,EAA8B,UAACY,GAAD,EAAMC,OAAN,EAAkB;AAC9C,UAAID,GAAJ,EAAS;AACP,eAAOP,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,UAAAA,MAAM,EAAE,OAAV;AAAmBE,UAAAA,KAAK,EAAE;AAA1B,SAArB,CAAP;AACD,OAFD,MAEO,IAAIH,OAAJ,EAAa;AAClB;AACAT,QAAAA,GAAG,CAACS,OAAJ,GAAcA,OAAd;AACAP,QAAAA,IAAI;AACL;AACF,KARD;AASD,GAVD,MAUO;AACL,WAAOD,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAAEJ,MAAAA,MAAM,EAAE,OAAV;AAAmBE,MAAAA,KAAK,EAAE;AAA1B,KAArB,CAAP;AACD;AACF,CAfM","sourcesContent":["/* eslint-disable no-else-return */\n/* eslint-disable consistent-return */\nimport '@babel/polyfill';\nimport jwt from 'jsonwebtoken';\nimport 'dotenv/config';\n\nconst { SECRET_KEY } = process.env;\n\nexport const isAdminAuthenticated = (req, res, next) => {\n  const token = req.query.token || req.headers.token;\n  if (token) {\n    jwt.verify(token, SECRET_KEY, (err, decoded) => {\n      if (err) {\n        return res.status(401).json({ status: 'error', error: 'Failed to authenticate token.' });\n      } else if (decoded.isAdmin !== true) {\n        return res.status(403).send({ status: 'error', message: 'You do not have access to this resource' });\n      } else if (decoded.isAdmin === true) {\n        // if everything is good, save to request for use in other routes\n        req.decoded = decoded;\n        next();\n      }\n    });\n  } else {\n    return res.status(403).send({ status: 'error', error: 'You can not access this resources without a token.' });\n  }\n};\n\nexport const isUserAuthenticated = (req, res, next) => {\n  const token = req.query.token || req.headers.token;\n  if (token) {\n    jwt.verify(token, SECRET_KEY, (err, decoded) => {\n      if (err) {\n        return res.status(401).json({ status: 'error', error: 'Failed to authenticate token.' });\n      } else if (decoded) {\n        // if everything is good, save to request for use in other routes\n        req.decoded = decoded;\n        next();\n      }\n    });\n  } else {\n    return res.status(403).send({ status: 'error', error: 'You can not access this resources without a token.' });\n  }\n};\n\n"],"file":"authenticator.js"}