{"version":3,"sources":["../src/db.js"],"names":["DATABASE_URL","process","env","pool","Pool","connectionString","on","console","log","tripTableSQL","userTableSQL","createTripTable","query","then","error","adminData","createUserTable","rows","push","err","createAllTables","module","exports","text","params","require"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;;;AACA;IAEQA,Y,GAAiBC,OAAO,CAACC,G,CAAzBF,Y;AACR,IAAMG,IAAI,GAAG,IAAIC,QAAJ,CAAS;AACpBC,EAAAA,gBAAgB,EAAEL;AADE,CAAT,CAAb;AAIAG,IAAI,CAACG,EAAL,CAAQ,SAAR,EAAmB,YAAM;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD,CAFD;AAIA,IAAMC,YAAY,4UAAlB;AAYA,IAAMC,YAAY,iUAAlB;;AAYA,IAAMC,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAChBR,IAAI,CAACS,KAAL,CAAW,4BAAX,CADgB;;AAAA;AAAA;AAAA,mBAEhBT,IAAI,CAACS,KAAL,CAAWH,YAAX,EACHI,IADG;AAAA;AAAA;AAAA;AAAA,oCACE;AAAA;AAAA;AAAA;AAAA;AACJ;AACAN,sBAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;;AAFI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,aAKG,UAACM,KAAD,EAAW;AAAE,oBAAMA,KAAN;AAAc,aAL9B,CAFgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfH,eAAe;AAAA;AAAA;AAAA,GAArB;;AAWA,IAAMI,SAAS,GAAG,CAAC,QAAD,EAAW,UAAX,EAAuB,0BAAvB,EAAmD,IAAnD,CAAlB;;AACA,IAAMC,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAChBb,IAAI,CAACS,KAAL,CAAW,4BAAX,CADgB;;AAAA;AAAA;AAAA,mBAEhBT,IAAI,CAACS,KAAL,CAAWF,YAAX,EACHG,IADG;AAAA;AAAA;AAAA;AAAA,oCACE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAEmBV,IAAI,CAACS,KAAL,CAAW,uCAAX,EAAoD,CAAC,0BAAD,CAApD,CAFnB;;AAAA;AAAA;AAEIK,sBAAAA,IAFJ,SAEIA,IAFJ;;AAAA,0BAGCA,IAAI,CAAC,CAAD,CAHL;AAAA;AAAA;AAAA;;AAAA,qCAIFF,SAJE;AAAA;AAAA,6BAImB,2BAAa,UAAb,CAJnB;;AAAA;AAAA;;AAAA,mCAIQG,IAJR;;AAAA;AAAA,6BAMIf,IAAI,CAACS,KAAL,CAAW,uGAAX,EAAoHG,SAApH,EACHF,IADG,CACE;AAAA,+BAAMN,OAAO,CAACC,GAAR,CAAY,4BAAZ,CAAN;AAAA,uBADF,WAEG,UAACM,KAAD,EAAW;AAAE,8BAAMA,KAAN;AAAc,uBAF9B,CANJ;;AAAA;AAAA;AAAA;;AAAA;AASKP,sBAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;;AATL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,aAYK,UAACW,GAAD,EAAS;AAAE,oBAAMA,GAAN;AAAY,aAZ5B,CAFgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfH,eAAe;AAAA;AAAA;AAAA,GAArB;;AAiBA,IAAMI,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAChBJ,eAAe,EADC;;AAAA;AAAA;AAAA,mBAEhBL,eAAe,EAFC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfS,eAAe;AAAA;AAAA;AAAA,GAArB;;AAKAC,MAAM,CAACC,OAAP,GAAiB;AACfV,EAAAA,KAAK,EAAE,eAACW,IAAD,EAAOC,MAAP;AAAA,WAAkBrB,IAAI,CAACS,KAAL,CAAWW,IAAX,EAAiBC,MAAjB,CAAlB;AAAA,GADQ;AAEfJ,EAAAA,eAAe,EAAfA;AAFe,CAAjB;;AAIAK,OAAO,CAAC,eAAD,CAAP","sourcesContent":["import '@babel/polyfill';\nimport { Pool } from 'pg';\nimport 'dotenv/config';\nimport { hashPassword } from './utils/encrypt';\n// import 'make-runnable';\n\nconst { DATABASE_URL } = process.env;\nconst pool = new Pool({\n  connectionString: DATABASE_URL,\n});\n\npool.on('connect', () => {\n  console.log('connected to the db');\n});\n\nconst tripTableSQL = `\n  CREATE TABLE IF NOT EXISTS trips (\n    id SERIAL PRIMARY KEY,\n    bus_id INTEGER NOT NULL,\n    origin VARCHAR(150) NOT NULL,\n    destination VARCHAR(150) NOT NULL,\n    trip_date TEXT NOT NULL,\n    fare NUMERIC NOT NULL, \n    status VARCHAR(10) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    )\n  `;\nconst userTableSQL = `\n  CREATE TABLE IF NOT EXISTS users (\n    id SERIAL PRIMARY KEY,\n    email VARCHAR(50) NOT NULL UNIQUE,\n    first_name VARCHAR(30) NOT NULL,\n    last_name VARCHAR(30) NOT NULL,\n    is_admin BOOL  DEFAULT 'f' NOT NULL,\n    password TEXT NOT NULL, \n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    )\n  `;\n\nconst createTripTable = async () => {\n  await pool.query('DROP TABLE IF EXISTS trips');\n  await pool.query(tripTableSQL)\n    .then(async () => {\n      // Create table now\n      console.log('Trip Table created successfully');\n    })\n    .catch((error) => { throw error; });\n  // await pool.end();\n};\n\nconst adminData = ['Yusuff', 'Mustapha', 'officialwebdev@gmail.com', true];\nconst createUserTable = async () => {\n  await pool.query('DROP TABLE IF EXISTS users');\n  await pool.query(userTableSQL)\n    .then(async () => {\n      // Check if admin exists\n      const { rows } = await pool.query('SELECT * FROM users WHERE email = $1;', ['officialwebdev@gmail.com']);\n      if (!rows[0]) {\n        adminData.push(await hashPassword('admin123')); // Attach password\n        // Admin doesnt exist, seed the new admin\n        await pool.query('INSERT INTO users(first_name, last_name, email, is_admin, password)VALUES($1,$2,$3,$4,$5) RETURNING *', adminData)\n          .then(() => console.log('Admin created successfully'))\n          .catch((error) => { throw error; });\n      } else { console.log('Admin already exists'); }\n      // await pool.end();\n    }).catch((err) => { throw err; });\n};\n\nconst createAllTables = async () => {\n  await createUserTable();\n  await createTripTable();\n};\n\nmodule.exports = {\n  query: (text, params) => pool.query(text, params),\n  createAllTables,\n};\nrequire('make-runnable');\n"],"file":"db.js"}