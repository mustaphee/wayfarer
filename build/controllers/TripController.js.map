{"version":3,"sources":["../../src/controllers/TripController.js"],"names":["TripController","req","res","data","body","schema","Joi","object","keys","bus_id","number","integer","required","origin","string","max","trip_date","date","destination","fare","status","validate","error","value","send","message","Date","toISOString","con","result","returnData","trip_id","rows","id","json","token","user_id","is_admin","parseInt","params","tripId","module","exports"],"mappings":";;AAEA;;AACA;;AACA;;;;;;;;;;;;;;IAEMA,c;;;;;;;;;;;;+CACcC,G,EAAKC,G;;;;;;;AACfC,gBAAAA,I,GAAOF,GAAG,CAACG,I;AACXC,gBAAAA,M,GAASC,gBAAIC,MAAJ,GAAaC,IAAb,CAAkB;AAC/BC,kBAAAA,MAAM,EAAEH,gBAAII,MAAJ,GAAaC,OAAb,GAAuBC,QAAvB,EADuB;AAE/BC,kBAAAA,MAAM,EAAEP,gBAAIQ,MAAJ,GAAaF,QAAb,GAAwBG,GAAxB,CAA4B,GAA5B,CAFuB;AAG/BC,kBAAAA,SAAS,EAAEV,gBAAIW,IAAJ,EAHoB;AAI/BC,kBAAAA,WAAW,EAAEZ,gBAAIQ,MAAJ,GAAaF,QAAb,GAAwBG,GAAxB,CAA4B,GAA5B,CAJkB;AAK/BI,kBAAAA,IAAI,EAAEb,gBAAII,MAAJ,GAAaE,QAAb,EALyB;AAM/BQ,kBAAAA,MAAM,EAAEd,gBAAIQ,MAAJ,GAAaC,GAAb,CAAiB,EAAjB;AANuB,iBAAlB,C;gCAQUT,gBAAIe,QAAJ,CAAalB,IAAb,EAAmBE,MAAnB,C,EAAjBiB,K,iBAAAA,K,EAAOC,K,iBAAAA,K;;qBACXD,K;;;;;iDACKpB,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAC1BJ,kBAAAA,MAAM,EAAE,OADkB;AAE1BE,kBAAAA,KAAK,EAAEA,KAAK,CAACG;AAFa,iBAArB,C;;;;AAMP;AACA,oBAAI,CAACF,KAAK,CAACH,MAAX,EAAmBG,KAAK,CAACH,MAAN,GAAe,QAAf;AACnB,oBAAI,CAACG,KAAK,CAACP,SAAX,EAAsBO,KAAK,CAACP,SAAN,GAAkB,IAAIU,IAAJ,GAAWC,WAAX,EAAlB;AAChBC,gBAAAA,G,GAAM,CAACL,KAAK,CAACd,MAAP,EAAec,KAAK,CAACV,MAArB,EAA6BU,KAAK,CAACL,WAAnC,EACVK,KAAK,CAACP,SADI,EACOO,KAAK,CAACJ,IADb,EACmBI,KAAK,CAACH,MADzB,C;;uBAES,eAAM,gHAAN,EAAwHQ,GAAxH,C;;;AAAfC,gBAAAA,M;AACAC,gBAAAA,U,GAAa;AACjBC,kBAAAA,OAAO,EAAEF,MAAM,CAACG,IAAP,CAAY,CAAZ,EAAeC,EADP;AAEjBxB,kBAAAA,MAAM,EAAEoB,MAAM,CAACG,IAAP,CAAY,CAAZ,EAAevB,MAFN;AAGjBI,kBAAAA,MAAM,EAAEgB,MAAM,CAACG,IAAP,CAAY,CAAZ,EAAenB,MAHN;AAIjBK,kBAAAA,WAAW,EAAEW,MAAM,CAACG,IAAP,CAAY,CAAZ,EAAed,WAJX;AAKjBF,kBAAAA,SAAS,EAAEa,MAAM,CAACG,IAAP,CAAY,CAAZ,EAAehB,SALT;AAMjBG,kBAAAA,IAAI,EAAEU,MAAM,CAACG,IAAP,CAAY,CAAZ,EAAeb,IANJ;AAOjBC,kBAAAA,MAAM,EAAES,MAAM,CAACG,IAAP,CAAY,CAAZ,EAAeZ;AAPN,iB;AASnBlB,gBAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAAEJ,kBAAAA,MAAM,EAAE,SAAV;AAAqBjB,kBAAAA,IAAI,EAAE2B;AAA3B,iBAArB;;;;;;;iDAEO5B,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBc,IAAhB,CAAqB;AAAEd,kBAAAA,MAAM,EAAE,OAAV;AAAmBE,kBAAAA,KAAK;AAAxB,iBAArB,C;;;;;;;;;;;;;;;;;;;;;gDAIOrB,G,EAAKC,G;;;;;;;AACfC,gBAAAA,I,GAAOF,GAAG,CAACG,I;AACXC,gBAAAA,M,GAASC,gBAAIC,MAAJ,GAAaC,IAAb,CAAkB;AAC/B2B,kBAAAA,KAAK,EAAE7B,gBAAIQ,MAAJ,EADwB;AAE/BsB,kBAAAA,OAAO,EAAE9B,gBAAII,MAAJ,EAFsB;AAG/B2B,kBAAAA,QAAQ,EAAE/B;AAHqB,iBAAlB,C;iCAKGA,gBAAIe,QAAJ,CAAalB,IAAb,EAAmBE,MAAnB,C,EAAViB,K,kBAAAA,K;;qBACJA,K;;;;;kDACKpB,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAC1BJ,kBAAAA,MAAM,EAAE,OADkB;AAE1BE,kBAAAA,KAAK,EAAEA,KAAK,CAACG;AAFa,iBAArB,C;;;;;uBAMgB,eAAM,qBAAN,C;;;;AAAfO,gBAAAA,I,QAAAA,I;;oBACHA,IAAI,CAAC,CAAD,C;;;;;kDAAY9B,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBc,IAAhB,CAAqB;AAAEd,kBAAAA,MAAM,EAAE,SAAV;AAAqBjB,kBAAAA,IAAI,EAAE;AAA3B,iBAArB,C;;;AACrBD,gBAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAAEJ,kBAAAA,MAAM,EAAE,SAAV;AAAqBjB,kBAAAA,IAAI,EAAE6B;AAA3B,iBAArB;;;;;;;kDAEO9B,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBc,IAAhB,CAAqB;AAAEd,kBAAAA,MAAM,EAAE,OAAV;AAAmBE,kBAAAA,KAAK;AAAxB,iBAArB,C;;;;;;;;;;;;;;;;;;;;;gDAIMrB,G,EAAKC,G;;;;;;;AACdC,gBAAAA,I,GAAO;AAAE4B,kBAAAA,OAAO,EAAEO,QAAQ,CAACrC,GAAG,CAACsC,MAAJ,CAAWC,MAAZ;AAAnB,iB;AACPnC,gBAAAA,M,GAASC,gBAAIC,MAAJ,GAAaC,IAAb,CAAkB;AAC/B2B,kBAAAA,KAAK,EAAE7B,gBAAIQ,MAAJ,EADwB;AAE/BsB,kBAAAA,OAAO,EAAE9B,gBAAII,MAAJ,EAFsB;AAG/B2B,kBAAAA,QAAQ,EAAE/B,4BAHqB;AAI/ByB,kBAAAA,OAAO,EAAEzB,gBAAII,MAAJ,GAAaC,OAAb,GAAuBC,QAAvB;AAJsB,iBAAlB,C;iCAMUN,gBAAIe,QAAJ,CAAalB,IAAb,EAAmBE,MAAnB,C,EAAjBiB,K,kBAAAA,K,EAAOC,K,kBAAAA,K;;qBACXD,K;;;;;kDACKpB,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAC1BJ,kBAAAA,MAAM,EAAE,OADkB;AAE1BE,kBAAAA,KAAK,EAAEA,KAAK,CAACG;AAFa,iBAArB,C;;;;;uBAMgB,eAAM,oCAAN,EAA4C,CAACF,KAAK,CAACQ,OAAP,CAA5C,C;;;;AAAfC,gBAAAA,I,SAAAA,I;;oBACHA,IAAI,CAAC,CAAD,C;;;;;kDAAY9B,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBc,IAAhB,CAAqB;AAAEd,kBAAAA,MAAM,EAAE,OAAV;AAAmBE,kBAAAA,KAAK,EAAE;AAA1B,iBAArB,C;;;;uBACf,eAAM,6CAAN,EAAqD,CAAC,WAAD,EAAcC,KAAK,CAACQ,OAApB,CAArD,C;;;AACN7B,gBAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAAEJ,kBAAAA,MAAM,EAAE,SAAV;AAAqBjB,kBAAAA,IAAI,EAAE;AAAEsB,oBAAAA,OAAO,EAAE;AAAX;AAA3B,iBAArB;;;;;;;kDAGOvB,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBc,IAAhB,CAAqB;AAAEd,kBAAAA,MAAM,EAAE,OAAV;AAAmBE,kBAAAA,KAAK;AAAxB,iBAArB,C;;;;;;;;;;;;;;;;;;;;;AAIbmB,MAAM,CAACC,OAAP,GAAiB,IAAI1C,cAAJ,EAAjB","sourcesContent":["/* eslint-disable class-methods-use-this */\n/* eslint-disable consistent-return */\nimport Joi from '@hapi/joi';\nimport 'dotenv/config';\nimport { query } from '../db';\n\nclass TripController {\n  async createATrip(req, res) {\n    const data = req.body;\n    const schema = Joi.object().keys({\n      bus_id: Joi.number().integer().required(),\n      origin: Joi.string().required().max(150),\n      trip_date: Joi.date(),\n      destination: Joi.string().required().max(150),\n      fare: Joi.number().required(),\n      status: Joi.string().max(10),\n    });\n    const { error, value } = Joi.validate(data, schema);\n    if (error) {\n      return res.status(422).send({\n        status: 'error',\n        error: error.message,\n      });\n    }\n    try {\n      // const pool = new Pool({ connectionString: DATABASE_URL });\n      if (!value.status) value.status = 'active';\n      if (!value.trip_date) value.trip_date = new Date().toISOString();\n      const con = [value.bus_id, value.origin, value.destination,\n        value.trip_date, value.fare, value.status];\n      const result = await query('INSERT INTO trips(bus_id, origin, destination, trip_date, fare, status) VALUES($1,$2,$3,$4,$5, $6) RETURNING *', con);\n      const returnData = {\n        trip_id: result.rows[0].id,\n        bus_id: result.rows[0].bus_id,\n        origin: result.rows[0].origin,\n        destination: result.rows[0].destination,\n        trip_date: result.rows[0].trip_date,\n        fare: result.rows[0].fare,\n        status: result.rows[0].status,\n      };\n      res.status(201).send({ status: 'success', data: returnData });\n    } catch (err) {\n      return res.status(400).json({ status: 'error', error: err });\n    }\n  }\n\n  async getAllTrips(req, res) {\n    const data = req.body;\n    const schema = Joi.object().keys({\n      token: Joi.string(),\n      user_id: Joi.number(),\n      is_admin: Joi.boolean(),\n    });\n    const { error } = Joi.validate(data, schema);\n    if (error) {\n      return res.status(422).send({\n        status: 'error',\n        error: error.message,\n      });\n    }\n    try {\n      const { rows } = await query('SELECT * from trips');\n      if (!rows[0]) return res.status(200).json({ status: 'success', data: [] });\n      res.status(200).send({ status: 'success', data: rows });\n    } catch (err) {\n      return res.status(400).json({ status: 'error', error: err });\n    }\n  }\n\n  async cancelTrip(req, res) {\n    const data = { trip_id: parseInt(req.params.tripId) };\n    const schema = Joi.object().keys({\n      token: Joi.string(),\n      user_id: Joi.number(),\n      is_admin: Joi.boolean(),\n      trip_id: Joi.number().integer().required(),\n    });\n    const { error, value } = Joi.validate(data, schema);\n    if (error) {\n      return res.status(422).send({\n        status: 'error',\n        error: error.message,\n      });\n    }\n    try {\n      const { rows } = await query('SELECT * FROM trips WHERE id = $1;', [value.trip_id]);\n      if (!rows[0]) return res.status(200).json({ status: 'error', error: 'Trip doesnt exists!' });\n      await query('UPDATE trips SET status = $1 WHERE id = $2 ', ['cancelled', value.trip_id]);\n      res.status(201).send({ status: 'success', data: { message: 'Trip cancelled successfully' } });\n    } \n    catch (err) {\n      return res.status(400).json({ status: 'error', error: err });\n    }\n  }\n}\nmodule.exports = new TripController();\n"],"file":"TripController.js"}