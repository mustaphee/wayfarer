{"version":3,"sources":["../../src/controllers/AuthController.js"],"names":["AuthController","req","res","data","body","schema","Joi","object","keys","first_name","string","required","max","last_name","email","password","regex","is_admin","validate","error","value","status","send","message","rows","json","con","result","user","id","returnData","user_id","token","userHash","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable class-methods-use-this */\n/* eslint-disable consistent-return */\nimport Joi from '@hapi/joi';\nimport 'dotenv/config';\nimport { hashPassword, checkPassword } from '../utils/encrypt';\nimport generateToken from '../utils/generateToken';\nimport { query } from '../db';\n\nclass AuthController {\n  async signUp(req, res) {\n    const data = req.body;\n    const schema = Joi.object().keys({\n      first_name: Joi.string().required().max(30),\n      last_name: Joi.string().required().max(30),\n      email: Joi.string().email().required().max(50),\n      password: Joi.string().regex(/^[a-zA-Z0-9]{5,30}$/).required(),\n      is_admin: Joi.boolean(),\n    });\n    const { error, value } = Joi.validate(data, schema);\n    if (error) {\n      return res.status(422).send({\n        status: 'error',\n        error: error.message,\n      });\n    }\n    try {\n      const { rows } = await query('SELECT * FROM users WHERE email = $1;', [req.body.email]);\n      if (rows[0]) return res.status(400).json({ status: 'error', error: 'User already exists' });\n      value.password = await hashPassword(req.body.password);\n      if (!value.is_admin) value.is_admin = false;\n      const con = [value.first_name, value.last_name, value.email, value.password, value.is_admin];\n      const result = await query('INSERT INTO users(first_name, last_name, email, password, is_admin) VALUES($1,$2,$3,$4,$5) RETURNING *', con);\n      const user = result.rows[0];\n      const returnData = {\n        user_id: user.id,\n        is_admin: user.is_admin,\n        token: await generateToken(user.id, user.is_admin, user.email),\n        email: user.email,\n      };\n      res.status(201).send({ status: 'success', data: returnData });\n    } catch (err) {\n      return res.status(400).json({ status: 'error', error: err });\n    }\n  }\n\n  async signIn(req, res) {\n    const data = req.body;\n    const schema = Joi.object().keys({\n      email: Joi.string().email().required().max(50),\n      password: Joi.string().regex(/^[a-zA-Z0-9]{5,30}$/).required(),\n    });\n    const { error } = Joi.validate(data, schema);\n    if (error) {\n      return res.status(422).send({\n        status: 'error',\n        error: error.message,\n      });\n    } try {\n      const { rows } = await query('SELECT * FROM users WHERE email = $1;', [req.body.email]);\n      if (!rows[0]) {\n        return res.status(200).json({ status: 'error', error: 'User does not exist!' });\n      // eslint-disable-next-line no-else-return\n      } else {\n        const userHash = await checkPassword(req.body.password, rows[0].password);\n        if (userHash) {\n          const returnData = {\n            user_id: rows[0].id,\n            is_admin: rows[0].is_admin,\n            token: await generateToken(rows[0].id, rows[0].is_admin, rows[0].email),\n            email: rows[0].email,\n          };\n          res.status(200).send({ status: 'success', data: returnData });\n        } else {\n          return res.status(401).json({ status: 'error', error: 'Please check your user details' });\n        }\n      }\n    } catch (err) {\n      return res.status(400).json({ status: 'error', error: err });\n    }\n  }\n}\nmodule.exports = new AuthController();\n"],"file":"AuthController.js"}